[
  {
    "question": "클린 아키텍처의 핵심 원칙은 무엇인가요?",
    "contexts": [
      "클린 아키텍처는 로버트 C. 마틴이 제안한 소프트웨어 설계 철학입니다.",
      "가장 중요한 규칙은 '의존성 규칙'으로, 모든 소스 코드 의존성은 외부에서 내부로, 즉 저수준의 구체적인 정책에서 고수준의 추상적인 정책으로만 향해야 합니다.",
      "이를 통해 시스템은 프레임워크, 데이터베이스, UI와 독립적으로 유지될 수 있습니다."
    ],
    "answer": "클린 아키텍처에서 가장 중요한 것은 의존성 방향입니다. 고수준 모듈이 저수준 모듈에 의존하지 않아야 하며, 추상화에 의존해야 합니다.",
    "ground_truth": "클린 아키텍처의 핵심 원칙은 의존성 규칙으로, 모든 소스 코드 의존성은 외부에서 내부로, 저수준 정책에서 고수준 정책으로 향해야 합니다."
  },
  {
    "question": "RAGAS의 Faithfulness 지표는 무엇을 측정하나요?",
    "contexts": [
      "Faithfulness는 생성된 답변이 제공된 컨텍스트에 얼마나 충실한지를 평가합니다.",
      "이 지표는 LLM의 환각(Hallucination) 현상을 측정하는 데 사용됩니다.",
      "Answer Relevancy는 답변이 질문과 관련이 있는지를 측정하는 다른 지표입니다."
    ],
    "answer": "Faithfulness는 생성된 답변의 정확성을 측정하는 지표로, 제공된 문서에서 벗어나지 않고 사실에 기반하여 답변하는지를 확인합니다.",
    "ground_truth": "Faithfulness는 생성된 답변이 제공된 컨텍스트에 얼마나 충실한지를 평가하여 LLM의 환각 현상을 측정하는 지표이다."
  },
  {
    "question": "파이썬에서 딕셔너리를 정렬하는 방법은 무엇인가요?",
    "contexts": [
      "파이썬 딕셔너리는 3.7 버전부터 삽입 순서를 유지합니다.",
      "sorted() 함수와 dict.items()를 함께 사용하여 딕셔너리를 정렬할 수 있습니다.",
      "키 또는 값을 기준으로 정렬이 가능하며, 람다 함수를 사용하여 정렬 기준을 지정할 수 있습니다."
    ],
    "answer": "딕셔너리 정렬은 sorted(dict.items()) 방식으로 하거나, 키 기준으로는 sorted(dict.items(), key=lambda x: x[0])을 사용합니다.",
    "ground_truth": "파이썬에서 딕셔너리를 정렬하려면 sorted() 함수와 dict.items()를 함께 사용하고, key 매개변수로 정렬 기준을 지정할 수 있습니다."
  }
]