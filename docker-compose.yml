version: '3.8'

services:
  # RAGTrace Main Application
  ragtrace:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ragtrace-dashboard
    ports:
      - "8501:8501"
    environment:
      # Required API Keys
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - CLOVA_STUDIO_API_KEY=${CLOVA_STUDIO_API_KEY:-}
      
      # Model Configuration
      - GEMINI_MODEL_NAME=${GEMINI_MODEL_NAME:-models/gemini-2.5-flash-preview-05-20}
      - GEMINI_EMBEDDING_MODEL_NAME=${GEMINI_EMBEDDING_MODEL_NAME:-models/gemini-embedding-exp-03-07}
      - HCX_MODEL_NAME=${HCX_MODEL_NAME:-HCX-005}
      - DEFAULT_LLM=${DEFAULT_LLM:-gemini}
      
      # Streamlit Configuration
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      
      # Application Configuration
      - PYTHONPATH=/app
      - UV_PROJECT_ENVIRONMENT=/app/.venv
    volumes:
      - ./data:/app/data
      - evaluation_db:/app/data/db
    networks:
      - ragtrace-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # CLI Service (for running evaluations without web interface)
  ragtrace-cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ragtrace-cli
    environment:
      # Required API Keys
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - CLOVA_STUDIO_API_KEY=${CLOVA_STUDIO_API_KEY:-}
      
      # Model Configuration
      - GEMINI_MODEL_NAME=${GEMINI_MODEL_NAME:-models/gemini-2.5-flash-preview-05-20}
      - GEMINI_EMBEDDING_MODEL_NAME=${GEMINI_EMBEDDING_MODEL_NAME:-models/gemini-embedding-exp-03-07}
      - HCX_MODEL_NAME=${HCX_MODEL_NAME:-HCX-005}
      - DEFAULT_LLM=${DEFAULT_LLM:-gemini}
      
      # Application Configuration
      - PYTHONPATH=/app
      - UV_PROJECT_ENVIRONMENT=/app/.venv
    volumes:
      - ./data:/app/data
      - evaluation_db:/app/data/db
    networks:
      - ragtrace-network
    command: ["uv", "run", "python", "hello.py"]
    profiles:
      - cli

  # Optional: PostgreSQL for large-scale data storage
  postgres:
    image: postgres:15-alpine
    container_name: ragtrace-postgres
    environment:
      - POSTGRES_DB=ragtrace_db
      - POSTGRES_USER=ragtrace_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ragtrace_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ragtrace-network
    restart: unless-stopped
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ragtrace_user -d ragtrace_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ragtrace-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ragtrace-network
    restart: unless-stopped
    profiles:
      - cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  evaluation_db:
    driver: local

networks:
  ragtrace-network:
    driver: bridge