name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "## Changes" > CHANGELOG.md
        if [ -n "$(git tag --list | tail -2 | head -1)" ]; then
          PREVIOUS_TAG=$(git tag --list | tail -2 | head -1)
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi
        
        # Set output for release body
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  build-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Create source distribution
      run: |
        uv build --sdist --wheel
        
        # Create additional assets
        mkdir -p release-assets
        
        # Copy important files
        cp README.md release-assets/
        cp CLAUDE.md release-assets/
        cp LICENSE release-assets/
        cp docker-compose.yml release-assets/
        cp Dockerfile release-assets/
        cp uv-setup.sh release-assets/
        
        # Create deployment archive
        tar -czf release-assets/ragtrace-deployment-${{ github.ref_name }}.tar.gz \
          docker-compose.yml Dockerfile .env.example \
          README.md CLAUDE.md LICENSE
        
        # Create quick start archive  
        tar -czf release-assets/ragtrace-quickstart-${{ github.ref_name }}.tar.gz \
          uv-setup.sh README.md CLAUDE.md LICENSE \
          data/evaluation_data.json

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          release-assets/*
        tag_name: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'rc') && !contains(github.ref, 'beta')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version in files
      run: |
        # Update version in pyproject.toml
        VERSION=${GITHUB_REF_NAME#v}
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        
        # Update version in README if needed
        # sed -i "s/ragtrace:latest/ragtrace:$VERSION/g" README.md

    - name: Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git diff --staged --quiet || git commit -m "chore: update version to ${{ github.ref_name }}"
        git push origin HEAD:main