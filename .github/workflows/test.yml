name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Code quality check
      run: |
        uv run ruff check src/ --fix || true
        uv run black --check src/ || true
        uv run mypy src/ || true

    - name: Test with pytest
      env:
        GEMINI_API_KEY: mock_key_for_testing
        CLOVA_STUDIO_API_KEY: mock_key_for_testing
        DEBUG_MODE: true
      run: |
        uv run pytest --cov=src --cov-report=xml --cov-report=html --cov-fail-under=35

    - name: Generate test report
      if: always()
      run: |
        python scripts/generate_test_report.py

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-report-${{ matrix.python-version }}
        path: reports/