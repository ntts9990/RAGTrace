name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install ${{ matrix.python-version }}

    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Environment test
      run: uv run python hello.py
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'mock_key_for_testing' }}
        CLOVA_STUDIO_API_KEY: ${{ secrets.CLOVA_STUDIO_API_KEY || 'mock_key_for_testing' }}

    - name: Run tests (if available)
      run: |
        if [ -f "pytest.ini" ] || [ -d "tests/" ]; then
          uv run pytest --cov=src --cov-report=xml --maxfail=3 -v
        else
          echo "No tests found, skipping pytest"
        fi
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'mock_key_for_testing' }}
        CLOVA_STUDIO_API_KEY: ${{ secrets.CLOVA_STUDIO_API_KEY || 'mock_key_for_testing' }}

    - name: Code quality check
      run: |
        uv run ruff check src/ --fix || true
        uv run black --check src/ || true
        uv run mypy src/ || true

    - name: Upload coverage
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ragtrace:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm \
          -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY || 'mock_key_for_testing' }}" \
          -e CLOVA_STUDIO_API_KEY="${{ secrets.CLOVA_STUDIO_API_KEY || 'mock_key_for_testing' }}" \
          ragtrace:test uv run python hello.py

  docker-compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test .env file
      run: |
        cat > .env << EOF
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY || 'mock_key_for_testing' }}
        CLOVA_STUDIO_API_KEY=${{ secrets.CLOVA_STUDIO_API_KEY || 'mock_key_for_testing' }}
        DEFAULT_LLM=gemini
        EOF

    - name: Test Docker Compose build
      run: |
        docker-compose build ragtrace

    - name: Test CLI service
      run: |
        docker-compose run --rm ragtrace-cli uv run python hello.py

    - name: Test health check
      run: |
        # Start the dashboard service in background
        docker-compose up -d ragtrace
        
        # Wait for health check to pass
        timeout 60 bash -c 'until docker-compose ps ragtrace | grep -q "healthy"; do sleep 5; done'
        
        # Stop services
        docker-compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'